<form name="config" id="config">
  <p style="font-size:24px;"><br> Select Job Options </p>
  <label>
    <input type="checkbox" name="jobselect" value="conda"> Conda activate
  </label>
  <label>
    <input type="checkbox" name="jobselect" value="gpu"> Using GPU
  </label>
  <br><br>
  <table>
    <tr>
      <td>JOBNAME: </td>
      <td><input type="text" name="job_name" size="12" value="testname"></td>
    </tr>
    <tr>
      <td>CPU: </td>
      <td><input type="text" name="ntask" size="12" value="1"></td>
    </tr>
    <tr>
      <td>MEMORY: </td>
      <td><input type="text" name="mem" size="12" value="1gb"></td>
    </tr>
    <tr>
      <td>TIME: </td>
      <td><input type="text" name="job_time" size="12" value="00:01:00"></td>
    </tr>
    <tr>
      <td>USERNAME: </td>
      <td><input type="text" name="id" size="12" value="username"></td>
    </tr>
    <tr>
      <td>ENVNAME: </td>
      <td><input type="text" name="envname" size="12" value="envname"></td>
    </tr>
    <tr>
      <td>Script: </td>
      <td>
        <textarea name="script" rows="5" cols="40" placeholder="python /mnt/nas/users/$(whoami)/main.py"></textarea>
      </td>
    </tr>
    <tr>
      <td>
        <input id="printCopyButton" type="button" value="Print & Copy">
        <input id="resetButton" type="button" value="Reset">
      </td>
    </tr>
  </table>
  <br><br>
  <!-- 이 요소가 실제 DOM에 출력되어야 함 -->
  <pre id="result"></pre>
</form>

{% raw %}
<script>
  function printinfo() {
    console.log("printinfo function called!");

    var form = document.forms['config'];
    var jobselect = form.jobselect;
    var check_job;
    if (jobselect[0].checked === true && jobselect[1].checked === false) {
      check_job = jobselect[0].value;
    } else if (jobselect[0].checked === false && jobselect[1].checked === true) {
      check_job = jobselect[1].value;
    } else if (jobselect[0].checked === true && jobselect[1].checked === true) {
      check_job = "both";
    } else {
      check_job = "none";
    }

    var conda_script = "# Set up conda environment\n" +
                       "CONDA_BIN_PATH=/opt/miniconda/bin\n" +
                       "ENV_NAME=" + form.envname.value + "\n" +
                       "ENV_PATH=/mnt/nas/users/$(whoami)/.conda/envs/$ENV_NAME\n" +
                       "source $CONDA_BIN_PATH/activate $ENV_PATH";

    var job_script = "#!/bin/bash\n" +
                     "#\n" +
                     "#SBATCH --job-name=" + form.job_name.value + "\n" +
                     "#SBATCH --partition=all\n" +
                     "#SBATCH --account=" + form.id.value + "\n" +
                     "#SBATCH --mem=" + form.mem.value + "\n" +
                     "#SBATCH --ntasks=1\n" +
                     "#SBATCH --cpus-per-task=" + form.ntask.value + "\n" +
                     "#SBATCH --time=" + form.job_time.value + "\n" +
                     "#SBATCH --output=/mnt/nas/users/" + form.id.value + "/" + form.job_name.value + ".log\n" +
                     "#SBATCH --error=/mnt/nas/users/" + form.id.value + "/" + form.job_name.value + ".err\n";

    var gpu_script = "#SBATCH --gres=gpu:1\n" +
                     "#SBATCH --nodelist=gpu-compute";

    var script_content = form.script.value;

    var printme;
    if (check_job === "conda") {
      printme = job_script +
                "#SBATCH --nodelist=cpu-compute\n" +
                "\n" +
                conda_script + "\n" +
                "\n" + script_content;
    } else if (check_job === "gpu") {
      printme = job_script +
                gpu_script + "\n" +
                "\n" + script_content;
    } else if (check_job === "both") {
      printme = job_script +
                gpu_script + "\n" +
                "\n" + conda_script + "\n" +
                "\n" + script_content;
    } else if (check_job === "none") {
      printme = job_script +
                "#SBATCH --nodelist=cpu-compute\n" +
                "\n" + script_content;
    }

    var resultElem = document.getElementById("result");
    if (resultElem) {
      resultElem.textContent = printme;
    } else {
      console.error("Result element not found!");
    }

    navigator.clipboard.writeText(printme)
      .then(() => {
          console.log("Script copied to clipboard!");
          alert("Script copied to clipboard!");
      })
      .catch(err => {
          console.error('Failed to copy script: ', err);
      });
  }

  function resetinfo() {
    document.forms['config'].reset();

    var printme = "#!/bin/bash\n" +
                  "#\n" +
                  "#SBATCH --job-name=\n" +
                  "#SBATCH --partition=all\n" +
                  "#SBATCH --account=\n" +
                  "#SBATCH --mem=\n" +
                  "#SBATCH --ntasks=1\n" +
                  "#SBATCH --cpus-per-task=\n" +
                  "#SBATCH --time=\n" +
                  "#SBATCH --output=/mnt/nas/users//.log\n" +
                  "#SBATCH --error=/mnt/nas/users//.err\n" +
                  "#SBATCH --nodelist=cpu-compute\n" +
                  "\n" +
                  "python /mnt/nas/users/$(whoami)/main.py";

    var resultElem = document.getElementById("result");
    if (resultElem) {
      resultElem.textContent = printme;
    } else {
      console.error("Result element not found during reset!");
    }
  }

    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() { // setTimeout으로 감싸기
            var resultElem = document.getElementById("result");
            if (!resultElem) {
                console.error("Result element not found on DOMContentLoaded!");
            }
            var printCopyButton = document.getElementById("printCopyButton");
            var resetButton = document.getElementById("resetButton");
            if (printCopyButton && resetButton) {
                printCopyButton.addEventListener('click', printinfo);
                resetButton.addEventListener('click', resetinfo);
            } else {
                console.error("Print or Reset buttons not found!");
            }
            resetinfo();
        }, 0); // 0ms 지연
    });
</script>
{% endraw %}
